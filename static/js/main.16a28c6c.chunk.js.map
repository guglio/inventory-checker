{"version":3,"sources":["services/index.js","constants/index.js","components/Inventory.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL","console","log","getInventory","query","axios","get","JSON","stringify","MODEL_TYPE","ms","m3","mx","my","mt","Table","columns","data","useTable","getTableProps","headerGroups","rows","prepareRow","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","render","TableBody","length","row","i","getRowProps","cells","cell","getCellProps","colSpan","Typography","variant","component","align","Inventory","useState","setData","undefined","update","setUpdate","useEffect","fetchData","model","condition","options","arrangeby","order","market","language","super_region","promises","Object","keys","reduce","acc","curr","currQuery","offset","count","outsideOffset","outsideSearch","Promise","all","then","res","VIN","TrimName","City","Model","OptionCodeSpecs","C_OPTS","id","c","name","join","parseResults","a","results","Date","inventoryInteval","setInterval","clearInterval","accessor","href","target","rel","Header","width","Box","App","CssBaseline","Container","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16a28c6c.chunk.js","sourcesContent":["import axios from 'axios';\nconst API_URL = process.env.NODE_ENV === 'development' ? '/teslaApi' : 'https://nessus-ui.herokuapp.com/inventory/';\nconsole.log(API_URL)\n// const API_URL = 'https://www.tesla.com/inventory/api/v1/';\n\n// const query = {\n//   query: {\n//     model: 'ms',\n//     condition: 'new',\n//     options: {},\n//     arrangeby: 'Relevance',\n//     order: 'desc',\n//     market: 'US',\n//     language: 'en',\n//     super_region: 'north america'\n//   },\n//   offset: 0,\n//   count: 50,\n//   outsideOffset: 0,\n//   outsideSearch: true\n// }\n\n// export const getInventory = () => axios.get(`https://nessus-ui.herokuapp.com/inventory/`)\nexport const getInventory = (query) => axios.get(`${API_URL}/inventory/api/v1/inventory-results?query=${JSON.stringify(query)}`)\n","export const MODEL_TYPE = {\n    ms: 'S',\n    m3: '3',\n    mx: 'X',\n    my: 'Y',\n    mt: 'Cybertruck'\n}","import React, { useState, useEffect } from 'react'\nimport Box from '@mui/material/Box';\nimport MaUTable from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Typography from '@mui/material/Typography';\n\nimport { useTable } from 'react-table'\nimport { getInventory } from '../services/'\nimport {MODEL_TYPE} from '../constants';\n\nconst ORDER_URL = 'https://www.tesla.com/'\n\nfunction Table ({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable({\n    columns,\n    data\n  })\n\n  // Render the UI for your table\n  return (\n    <MaUTable {...getTableProps()}>\n      <TableHead>\n        {headerGroups.map(headerGroup => (\n          <TableRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableCell {...column.getHeaderProps()}>\n                {column.render('Header')}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableHead>\n      <TableBody>\n        {rows.length ? (\n          rows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableCell>\n                  )\n                })}\n              </TableRow>\n            )\n          })\n        ) : (\n          <TableCell colSpan={columns.length}>\n            <Typography variant=\"h5\" component=\"div\" align=\"center\">No data :(</Typography>\n          </TableCell>\n        )}\n      </TableBody>\n    </MaUTable>\n  )\n}\n\nconst Inventory = () => {\n  const [data, setData] = useState([])\n  const [update, setUpdate] = useState(undefined)\n\n  useEffect(() => {\n    const parseResults = data => {\n      let returnData = data.reduce((acc, curr) => {\n        const {\n          VIN,\n          TrimName,\n          City,\n          Model,\n          OptionCodeSpecs: {\n            C_OPTS: { options }\n          }\n        } = curr\n        return (acc = [\n          ...acc,\n          {\n            id: VIN,\n            VIN,\n            TrimName,\n            City,\n            Model,\n            options: options.map(c => c.name).join(', ')\n          }\n        ])\n      }, [])\n\n      return returnData\n    }\n    const fetchData = () => {\n      const query = {\n          model: 'ms',\n          condition: 'new',\n          options: {},\n          arrangeby: 'Relevance',\n          order: 'desc',\n          market: 'US',\n          language: 'en',\n          super_region: 'north america'\n        };\n      let promises = Object.keys(MODEL_TYPE).reduce((acc, curr) => {\n        let currQuery = {\n          query : {\n            ...query,\n            model:curr\n          },\n          offset: 0,\n          count: 50,\n          outsideOffset: 0,\n          outsideSearch: true\n        }\n\n        return acc = [...acc, getInventory(currQuery)]\n      },[]);\n      Promise.all(promises).then(res => {\n        setData(parseResults(res.reduce((a,c) => a = [...a, ...c?.data?.results],[])))\n        setUpdate(`${new Date()}`)\n      })\n    }\n    const inventoryInteval = setInterval(() => fetchData(), 1000 * 5 * 60)\n\n    fetchData()\n    return () => {\n      clearInterval(inventoryInteval)\n    }\n  }, [])\n\n  const columns = [\n    {\n      accessor: row => (\n        <a\n          href={`${ORDER_URL}${row.Model}/order/${row.VIN}`}\n          target='_blank'\n          rel='noreferrer'\n        >\n          {row.VIN}\n        </a>\n      ),\n      Header: 'VIN',\n      width: '20%'\n    },\n    { Header: 'Model', width: '20%', accessor: row => MODEL_TYPE[row.Model] },\n    { accessor: 'City', Header: 'City', width: '20%' },\n    { accessor: 'TrimName', Header: 'Trim', width: '20%' },\n    { accessor: 'options', Header: 'Options', width: '20%' }\n  ]\n\n  return (\n    <Box>\n      \n      <Table data={data} columns={columns} />\n      <Typography variant='body1'>Last update: {update}</Typography>\n    </Box>\n  )\n}\n\nexport default Inventory\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport Inventory from './components/Inventory'\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nfunction App () {\n  return (\n    <>\n    <CssBaseline />\n    <Container >\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Inventory />\n        </Route>\n      </Switch>\n    </Router>\n    </Container>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}