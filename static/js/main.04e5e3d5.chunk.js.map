{"version":3,"sources":["components/Inventory.js","services/index.js","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useTable","getTableProps","headerGroups","rows","prepareRow","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","render","TableBody","row","i","getRowProps","cells","cell","getCellProps","Inventory","useState","setData","undefined","update","setUpdate","useEffect","fetchData","axios","get","then","res","reduce","acc","curr","VIN","TrimName","City","Model","options","OptionCodeSpecs","C_OPTS","id","c","name","join","parseResults","results","Date","inventoryInteval","setInterval","clearInterval","accessor","href","target","rel","Header","width","CssBaseline","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04e5e3d5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport MaUTable from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\n\nimport { useTable } from 'react-table'\nimport { getInventory } from '../services/'\n\nconst ORDER_URL = 'https://www.tesla.com/'\n\nfunction Table ({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable({\n    columns,\n    data\n  })\n\n  // Render the UI for your table\n  return (\n    <MaUTable {...getTableProps()}>\n      <TableHead>\n        {headerGroups.map(headerGroup => (\n          <TableRow {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <TableCell {...column.getHeaderProps()}>\n                {column.render('Header')}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableHead>\n      <TableBody>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <TableRow {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <TableCell {...cell.getCellProps()}>\n                    {cell.render('Cell')}\n                  </TableCell>\n                )\n              })}\n            </TableRow>\n          )\n        })}\n      </TableBody>\n    </MaUTable>\n  )\n}\n\nconst Inventory = () => {\n  const [data, setData] = useState([]);\n  const [update, setUpdate] = useState(undefined);\n\n  useEffect(() => {\n    const parseResults = data => {\n      let returnData = data.reduce((acc, curr) => {\n        const {\n          VIN,\n          TrimName,\n          City,\n          Model,\n          OptionCodeSpecs: {\n            C_OPTS: { options }\n          }\n        } = curr\n        return (acc = [\n          ...acc,\n          {\n            id: VIN,\n            VIN,\n            TrimName,\n            City,\n            Model,\n            options: options.map(c => c.name).join(', ')\n          }\n        ])\n      }, [])\n\n      return returnData\n    }\n    const fetchData = () => {\n      getInventory().then(res => {\n        const { data } = res;\n        setData(parseResults(data.results))\n        setUpdate(`${new Date()}`)\n      })\n    };\n    const inventoryInteval = setInterval(\n      () =>\n      fetchData(),\n      1000 * 5  * 60\n      )\n      \n      fetchData();\n    return () => {\n      clearInterval(inventoryInteval)\n    }\n  }, [])\n\n  const columns = [\n    {\n      accessor: row => (\n        <a\n          href={`${ORDER_URL}${row.Model}/order/${row.VIN}`}\n          target='_blank'\n          rel='noreferrer'\n        >\n          {row.VIN}\n        </a>\n      ),\n      Header: 'VIN',\n      width: '20%'\n    },\n    { accessor: 'Model', Header: 'Model', width: '20%' },\n    { accessor: 'City', Header: 'City', width: '20%' },\n    { accessor: 'TrimName', Header: 'TrimName', width: '20%' },\n    { accessor: 'options', Header: 'options', width: '20%' }\n  ]\n\n  return (\n    <div>\n      <CssBaseline />\n      <Table data={data} columns={columns} />\n  <div>Last update: {update}</div>\n    </div>\n  )\n}\n\nexport default Inventory\n","import axios from 'axios';\n\n// const API_URL = 'https://www.tesla.com/inventory/api/v1/';\n\n// const query = {\n//   query: {\n//     model: 'ms',\n//     condition: 'new',\n//     options: {},\n//     arrangeby: 'Relevance',\n//     order: 'desc',\n//     market: 'US',\n//     language: 'en',\n//     super_region: 'north america'\n//   },\n//   offset: 0,\n//   count: 50,\n//   outsideOffset: 0,\n//   outsideSearch: true\n// }\n\nexport const getInventory = () => axios.get(`https://nessus-ui.herokuapp.com/inventory/`)\n// export const getInventory = () => axios.get(`/api/inventory`)\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Inventory from './components/Inventory'\n\nfunction App () {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Inventory />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}